#Choosing the modified model dataset
model_hp <- read.csv("model_data.csv", header=TRUE)
uk_retailer <- read.csv("UK_retailer_cleaned_version2.csv", header=TRUE)
#cluster5<-  read.csv("Onetimer_Cluster_data.csv", quote="")
 
#Preprocess the dataset to select repeat purchasers and convert columns into numeric format of PCA
library(dplyr)
library(sqldf)
colnames(model_hp)
View(model_hp)
model_hp<- sqldf("select * FROM model_hp WHERE Visits=1")

#considering both product  bill

model_data<- sqldf("select Spend,Bills,Qty, FreeQty,ABS,ATV,
                   CUTLERy_bills,DL_bills,DAILYUSE_bills,HOD_bills,ACC_bills,FURN_bills,
                   STATIONARY_bills,Game_bills FROM model_hp WHERE Visits=1")

model_data$Bills<- as.numeric(model_data$Bills)
#model_data$Visits<- as.numeric(model_data$Visits)
model_data$Qty<- as.numeric(model_data$Qty)
model_data$FreeQty<- as.numeric(model_data$FreeQty)
#model_data$Recency<- as.numeric(model_data$Recency)
#model_data$Latency<- as.numeric(model_data$Latency)
model_data$ATV<- as.numeric(model_data$ATV)
model_data$ABS<- as.numeric(model_data$ABS)
model_data$CUTLERy_bills<- as.numeric(model_data$CUTLERy_bills)
model_data$DL_bills<- as.numeric(model_data$DL_bills)
model_data$DAILYUSE_bills<- as.numeric(model_data$DAILYUSE_bills)
model_data$HOD_bills<- as.numeric(model_data$HOD_bills)
model_data$ACC_bills<- as.numeric(model_data$ACC_bills)
model_data$FURN_bills<- as.numeric(model_data$FURN_bills)
model_data$STATIONARY_bills<- as.numeric(model_data$STATIONARY_bills)
model_data$Game_bills<- as.numeric(model_data$Game_bills)


#Scaling / Normalizing the data
model_scale<- as.data.frame(scale(model_data))

summary(model_scale)
# Get principal component vectors
pc <- prcomp(model_scale)
plot(pc, type='l')
summary(pc)
pc
plot(pc)
comp <- data.frame(pc$x[,1:5])
View(comp)

# Apply k-means with k=3 , 4, 5

#k <- kmeans(model_scale,3, nstart=25, iter.max=1000)
k_P3 <- kmeans(comp,3, nstart=25, iter.max=1000);
table(k_P3$cluster)

#k1 <- kmeans(model_scale,4, nstart=25, iter.max=1000)
k_P4 <- kmeans(comp,4, nstart=25, iter.max=1000);
table(k_P4$cluster)
#k2 <- kmeans(model_scale,5, nstart=25, iter.max=1000)
k_P5 <- kmeans(comp,5, nstart=25, iter.max=1000);
table(k_P5$cluster)
k_P6 <- kmeans(comp,6, nstart=25, iter.max=1000);
table(k_P6$cluster)

k3 <- kmeans(model_scale,3, nstart=25, iter.max=1000)
table(k$cluster)
k4 <- kmeans(model_scale,4, nstart=25, iter.max=1000)
table(k1$cluster)
k5 <- kmeans(model_scale,5, nstart=25, iter.max=1000)
table(k2$cluster)
k6 <- kmeans(model_scale,6, nstart=25, iter.max=1000)
table(k2$cluster)

h<- hclust(dist(model_scale))
plot(h)

#We need betweenss to be as high as possibile and we want it to be as low as possible and withinss as low as possible
k_P3$betweenss/k_P3$totss*100  
k_P4$betweenss/k_P4$totss*100  
k_P5$betweenss/k_P5$totss*100 
k_P6$betweenss/k_P6$totss*100 #70.9
k3$betweenss/k3$totss*100 #37.69
k4$betweenss/k4$totss*100 #43.28
k5$betweenss/k5$totss*100 # 50.34
k6$betweenss/k6$totss*100 # 65.2

#Using PCA data with 6 clusters, also confirmed from below

#Model Data
# Take the first iteration
wss <- sum(kmeans(model_scale,centers=1)$withinss)
# Take iteration 2 to 15
for (i in 2:15) wss[i] <- sum(kmeans(model_scale,centers=i)$withinss)
# Plot the 15 withinss values. One for each k
plot(1:15, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")

#Comp Data-----------sharp decline at 6
# Take the first iteration
wss <- sum(kmeans(comp,centers=1)$withinss)
# Take iteration 2 to 15
for (i in 2:15) wss[i] <- sum(kmeans(comp,centers=i)$withinss)
# Plot the 15 withinss values. One for each k
plot(1:15, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")



#Visulize clusters

library(ggplot2)
ggplot(as.data.frame(pc$x), aes(x=PC2, y=PC1, color=as.factor(k_P6$cluster))) + 
  geom_point(size=3) + theme_bw() + xlab("PC2") + ylab("PC1");

library(rgl)
plot3d(pc$x, col=as.factor(k_P6$cluster))


# Determine the right number of clusters using silhouette coefficient
library("cluster")
kmax <- 15
res <- rep(0,kmax)
for(i in 2:kmax){
  kmmtemp <- kmeans(model_scale,i,nstart=25)
  resv <- silhouette(kmmtemp$cluster,dist(model_scale))
  res[i] <- mean(resv[,3])
}
plot(1:kmax,res,type="l",pch=19,frame=FALSE,xlab="Number of clusters K",ylab="Silhouette coeficient")	



#Copy the cluster to acheived for each customer to the original dataset
View(k_P6$cluster)
model_hp<-cbind(model_hp,k_P6$cluster)
View(model_hp)
UK_merged<- merge(uk_retailer, model_hp, by  = "CustomerID" , all.x=TRUE);

analysis_data<- cbind(model_data,k_P6$cluster);

write.csv(model_hp, "FirstTime_ClusterG.csv")
#write.csv(analysis_data, "Analysis_data.csv");
write.csv(UK_merged, "UK_merged.csv");

#install.packages("DMwR");
library("DMwR");
CentreK<- k_P6$centers
#nComp=6
#nents = CentreK$x %*% t(CentreK$rotation)
s<-unscale(k_P6$centers, scale(model_data));
s

summary(analysis_data);
C1<- model_hp[model_hp$`k_P6$cluster`==1,];
C2<- model_hp[model_hp$`k_P6$cluster`==2,];
C3<- model_hp[model_hp$`k_P6$cluster`==3,];

cor(C2$Spend, C2$FreeQty);
cor(C1$Spend, C1$FreeQty);
cor(C3$Spend, C3$FreeQty);

cor(C3$Spend, C3$Visits);
cor(C3$Bills, C3$Visits);
library("lubridate");
#by_cluster<-aggregate(cluster5, by=list(cluster5$X.as.factor.k2.cluster..), FUN=mean);
#C5<- as.data.frame(by_cluster[c(1,3:5,7:8,11,13:15)]
#names(UK_merged);
#plot(analysis_data$ABS, col=as.factor(analysis_data$`as.factor(k$cluster)`))
plot3d(model_hp$Spend, model_hp$Bills, model_hp$`k_P6$cluster`)

install.packages("arules")
#-------------------------------------------------------------------------------------------------------------------

